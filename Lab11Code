import RPi.GPIO as GPIO
import datetime
import time
import threading
import csv
import argparse
import sys

PIN = 17 
count = 0
lock = threading.Lock()

def parse_arguments():
    parser = argparse.ArgumentParser(description="Pulse counter for a fixed duration.")
    parser.add_argument("--duration", type=int, required=True,
                        help="Total run time in seconds.")
    parser.add_argument("--interval", type=int, required=True,
                        help="Interval (in seconds) for counting pulses per entry.")
    return parser.parse_args()

def my_callback(channel):
    global count
    with lock:
        count += 1
    print('â–¼ Counts detected at ' + str(datetime.datetime.now()))

def count_logger(interval, duration, csv_writer, csvfile):
    global count
    elapsed = 0
    while elapsed < duration:
        time.sleep(interval)
        with lock:
            timestamp = datetime.datetime.now().isoformat()
            print(f"\n=== Counts in last {interval} seconds: {count} ===\n")
            csv_writer.writerow([timestamp, count])
            csvfile.flush()
            count = 0
        elapsed += interval

def main():
    args = parse_arguments()
    interval = args.interval
    duration = args.duration
    csv_filename = "al3.csv"

    # Open CSV file
    csvfile = open(csv_filename, mode="w", newline="")
    csv_writer = csv.writer(csvfile)

    # Write headers
    csv_writer.writerow(["# Pulse Count Data - Collected on Raspberry Pi"])
    csv_writer.writerow(["Timestamp", f"Pulse Count (per {interval}s)"])

    try:
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)  
        GPIO.add_event_detect(PIN, GPIO.FALLING, callback=my_callback, bouncetime=1)

        count_logger(interval, duration, csv_writer, csvfile)

    finally:
        csvfile.close()
        GPIO.cleanup()
        print("=== Data collection complete. Saved to 'al3.csv'. ===")

if __name__ == "__main__":
    main()
